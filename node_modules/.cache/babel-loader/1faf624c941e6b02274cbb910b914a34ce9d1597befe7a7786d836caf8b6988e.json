{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\Project\\\\Safety2\\\\src\\\\context\\\\LocationContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LocationContext = /*#__PURE__*/createContext();\nexport const LocationProvider = ({\n  children\n}) => {\n  _s();\n  const [currentLocation, setCurrentLocation] = useState(null);\n  const [locationHistory, setLocationHistory] = useState([]);\n  const [savedPlaces, setSavedPlaces] = useState([]);\n  const [isLocationSharing, setIsLocationSharing] = useState(false);\n  const [isBatterySaverMode, setIsBatterySaverMode] = useState(false);\n  const [error, setError] = useState(null);\n  const [loadingLocation, setLoadingLocation] = useState(true);\n  const [safeRoutes, setSafeRoutes] = useState([]);\n\n  // Simulate fetching saved places from API\n  useEffect(() => {\n    // In a real app, this would be an API call\n    const dummySavedPlaces = [{\n      id: 1,\n      name: 'Home',\n      address: '123 Home Street',\n      lat: 37.7749,\n      lng: -122.4194\n    }, {\n      id: 2,\n      name: 'Work',\n      address: '456 Office Avenue',\n      lat: 37.7833,\n      lng: -122.4167\n    }, {\n      id: 3,\n      name: 'Gym',\n      address: '789 Fitness Blvd',\n      lat: 37.7850,\n      lng: -122.4200\n    }];\n    setTimeout(() => {\n      setSavedPlaces(dummySavedPlaces);\n    }, 1000);\n  }, []);\n\n  // Track location when sharing is enabled\n  useEffect(() => {\n    let watchId;\n    const trackLocation = () => {\n      if (isLocationSharing) {\n        setLoadingLocation(true);\n        if (navigator.geolocation) {\n          const options = {\n            enableHighAccuracy: !isBatterySaverMode,\n            timeout: 15000,\n            maximumAge: isBatterySaverMode ? 60000 : 30000\n          };\n          watchId = navigator.geolocation.watchPosition(position => {\n            const {\n              latitude,\n              longitude\n            } = position.coords;\n            const newLocation = {\n              lat: latitude,\n              lng: longitude,\n              timestamp: new Date().toISOString()\n            };\n            setCurrentLocation(newLocation);\n            setLocationHistory(prev => [...prev, newLocation]);\n            setLoadingLocation(false);\n            setError(null);\n          }, err => {\n            setError(`Error getting location: ${err.message}`);\n            setLoadingLocation(false);\n          }, options);\n        } else {\n          setError('Geolocation is not supported by your browser');\n          setLoadingLocation(false);\n        }\n      }\n    };\n    trackLocation();\n    return () => {\n      if (watchId) {\n        navigator.geolocation.clearWatch(watchId);\n      }\n    };\n  }, [isLocationSharing, isBatterySaverMode]);\n\n  // Get current location once on initial load\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setCurrentLocation({\n          lat: latitude,\n          lng: longitude,\n          timestamp: new Date().toISOString()\n        });\n        setLoadingLocation(false);\n      }, err => {\n        setError(`Error getting location: ${err.message}`);\n        setLoadingLocation(false);\n      });\n    } else {\n      setError('Geolocation is not supported by your browser');\n      setLoadingLocation(false);\n    }\n  }, []);\n\n  // Function to toggle location sharing\n  const toggleLocationSharing = () => {\n    setIsLocationSharing(prev => !prev);\n  };\n\n  // Function to toggle battery saver mode\n  const toggleBatterySaverMode = () => {\n    setIsBatterySaverMode(prev => !prev);\n  };\n\n  // Add a new saved place\n  const addSavedPlace = place => {\n    setSavedPlaces(prev => [...prev, {\n      ...place,\n      id: Date.now()\n    }]);\n  };\n\n  // Remove a saved place\n  const removeSavedPlace = placeId => {\n    setSavedPlaces(prev => prev.filter(place => place.id !== placeId));\n  };\n  return /*#__PURE__*/_jsxDEV(LocationContext.Provider, {\n    value: {\n      currentLocation,\n      locationHistory,\n      savedPlaces,\n      isLocationSharing,\n      isBatterySaverMode,\n      loadingLocation,\n      error,\n      safeRoutes,\n      toggleLocationSharing,\n      toggleBatterySaverMode,\n      addSavedPlace,\n      removeSavedPlace\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationProvider, \"J3MM6UK25mPjcMPprXc2oRjL+Jc=\");\n_c = LocationProvider;\nvar _c;\n$RefreshReg$(_c, \"LocationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","LocationContext","LocationProvider","children","_s","currentLocation","setCurrentLocation","locationHistory","setLocationHistory","savedPlaces","setSavedPlaces","isLocationSharing","setIsLocationSharing","isBatterySaverMode","setIsBatterySaverMode","error","setError","loadingLocation","setLoadingLocation","safeRoutes","setSafeRoutes","dummySavedPlaces","id","name","address","lat","lng","setTimeout","watchId","trackLocation","navigator","geolocation","options","enableHighAccuracy","timeout","maximumAge","watchPosition","position","latitude","longitude","coords","newLocation","timestamp","Date","toISOString","prev","err","message","clearWatch","getCurrentPosition","toggleLocationSharing","toggleBatterySaverMode","addSavedPlace","place","now","removeSavedPlace","placeId","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Downloads/Project/Safety2/src/context/LocationContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const LocationContext = createContext();\r\n\r\nexport const LocationProvider = ({ children }) => {\r\n  const [currentLocation, setCurrentLocation] = useState(null);\r\n  const [locationHistory, setLocationHistory] = useState([]);\r\n  const [savedPlaces, setSavedPlaces] = useState([]);\r\n  const [isLocationSharing, setIsLocationSharing] = useState(false);\r\n  const [isBatterySaverMode, setIsBatterySaverMode] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [loadingLocation, setLoadingLocation] = useState(true);\r\n  const [safeRoutes, setSafeRoutes] = useState([]);\r\n  \r\n  // Simulate fetching saved places from API\r\n  useEffect(() => {\r\n    // In a real app, this would be an API call\r\n    const dummySavedPlaces = [\r\n      { id: 1, name: 'Home', address: '123 Home Street', lat: 37.7749, lng: -122.4194 },\r\n      { id: 2, name: 'Work', address: '456 Office Avenue', lat: 37.7833, lng: -122.4167 },\r\n      { id: 3, name: 'Gym', address: '789 Fitness Blvd', lat: 37.7850, lng: -122.4200 },\r\n    ];\r\n    \r\n    setTimeout(() => {\r\n      setSavedPlaces(dummySavedPlaces);\r\n    }, 1000);\r\n  }, []);\r\n\r\n  // Track location when sharing is enabled\r\n  useEffect(() => {\r\n    let watchId;\r\n    \r\n    const trackLocation = () => {\r\n      if (isLocationSharing) {\r\n        setLoadingLocation(true);\r\n        \r\n        if (navigator.geolocation) {\r\n          const options = {\r\n            enableHighAccuracy: !isBatterySaverMode,\r\n            timeout: 15000,\r\n            maximumAge: isBatterySaverMode ? 60000 : 30000\r\n          };\r\n          \r\n          watchId = navigator.geolocation.watchPosition(\r\n            position => {\r\n              const { latitude, longitude } = position.coords;\r\n              const newLocation = {\r\n                lat: latitude,\r\n                lng: longitude,\r\n                timestamp: new Date().toISOString()\r\n              };\r\n              \r\n              setCurrentLocation(newLocation);\r\n              setLocationHistory(prev => [...prev, newLocation]);\r\n              setLoadingLocation(false);\r\n              setError(null);\r\n            },\r\n            err => {\r\n              setError(`Error getting location: ${err.message}`);\r\n              setLoadingLocation(false);\r\n            },\r\n            options\r\n          );\r\n        } else {\r\n          setError('Geolocation is not supported by your browser');\r\n          setLoadingLocation(false);\r\n        }\r\n      }\r\n    };\r\n    \r\n    trackLocation();\r\n    \r\n    return () => {\r\n      if (watchId) {\r\n        navigator.geolocation.clearWatch(watchId);\r\n      }\r\n    };\r\n  }, [isLocationSharing, isBatterySaverMode]);\r\n\r\n  // Get current location once on initial load\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        position => {\r\n          const { latitude, longitude } = position.coords;\r\n          setCurrentLocation({\r\n            lat: latitude,\r\n            lng: longitude,\r\n            timestamp: new Date().toISOString()\r\n          });\r\n          setLoadingLocation(false);\r\n        },\r\n        err => {\r\n          setError(`Error getting location: ${err.message}`);\r\n          setLoadingLocation(false);\r\n        }\r\n      );\r\n    } else {\r\n      setError('Geolocation is not supported by your browser');\r\n      setLoadingLocation(false);\r\n    }\r\n  }, []);\r\n\r\n  // Function to toggle location sharing\r\n  const toggleLocationSharing = () => {\r\n    setIsLocationSharing(prev => !prev);\r\n  };\r\n\r\n  // Function to toggle battery saver mode\r\n  const toggleBatterySaverMode = () => {\r\n    setIsBatterySaverMode(prev => !prev);\r\n  };\r\n  \r\n  // Add a new saved place\r\n  const addSavedPlace = (place) => {\r\n    setSavedPlaces(prev => [...prev, { ...place, id: Date.now() }]);\r\n  };\r\n  \r\n  // Remove a saved place\r\n  const removeSavedPlace = (placeId) => {\r\n    setSavedPlaces(prev => prev.filter(place => place.id !== placeId));\r\n  };\r\n  \r\n  return (\r\n    <LocationContext.Provider value={{\r\n      currentLocation,\r\n      locationHistory,\r\n      savedPlaces,\r\n      isLocationSharing,\r\n      isBatterySaverMode,\r\n      loadingLocation,\r\n      error,\r\n      safeRoutes,\r\n      toggleLocationSharing,\r\n      toggleBatterySaverMode,\r\n      addSavedPlace,\r\n      removeSavedPlace\r\n    }}>\r\n      {children}\r\n    </LocationContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}