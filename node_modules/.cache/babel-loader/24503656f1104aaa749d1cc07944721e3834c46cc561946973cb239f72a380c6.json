{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\Project\\\\Safety2\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check if user is already logged in\n  useEffect(() => {\n    const checkAuth = () => {\n      const user = localStorage.getItem('user');\n      if (user) {\n        setCurrentUser(JSON.parse(user));\n        setIsAuthenticated(true);\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      // In a real app, this would be an API call\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Mock successful login\n      if (email && password) {\n        const user = {\n          id: 'user123',\n          name: 'Jane Doe',\n          email,\n          profilePic: 'https://i.pravatar.cc/150?img=1',\n          emergencyContacts: [{\n            id: 1,\n            name: 'Mom',\n            phone: '123-456-7890'\n          }, {\n            id: 2,\n            name: 'Dad',\n            phone: '098-765-4321'\n          }]\n        };\n        localStorage.setItem('user', JSON.stringify(user));\n        setCurrentUser(user);\n        setIsAuthenticated(true);\n        setError(null);\n        return user;\n      } else {\n        throw new Error('Invalid credentials');\n      }\n    } catch (err) {\n      setError(err.message);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    try {\n      setLoading(true);\n      // In a real app, this would be an API call\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      // Mock successful registration\n      if (userData.email && userData.password) {\n        const user = {\n          id: 'user' + Date.now(),\n          name: userData.name || 'New User',\n          email: userData.email,\n          profilePic: 'https://i.pravatar.cc/150?img=2',\n          emergencyContacts: []\n        };\n        localStorage.setItem('user', JSON.stringify(user));\n        setCurrentUser(user);\n        setIsAuthenticated(true);\n        setError(null);\n        return user;\n      } else {\n        throw new Error('Invalid user data');\n      }\n    } catch (err) {\n      setError(err.message);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('user');\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      isAuthenticated,\n      loading,\n      error,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"hNgQD0P+I/CyPsdPRzJTYoOt5q0=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","isAuthenticated","setIsAuthenticated","loading","setLoading","error","setError","checkAuth","user","localStorage","getItem","JSON","parse","login","email","password","Promise","resolve","setTimeout","id","name","profilePic","emergencyContacts","phone","setItem","stringify","Error","err","message","register","userData","Date","now","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Downloads/Project/Safety2/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Check if user is already logged in\r\n  useEffect(() => {\r\n    const checkAuth = () => {\r\n      const user = localStorage.getItem('user');\r\n      if (user) {\r\n        setCurrentUser(JSON.parse(user));\r\n        setIsAuthenticated(true);\r\n      }\r\n      setLoading(false);\r\n    };\r\n    \r\n    checkAuth();\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (email, password) => {\r\n    try {\r\n      setLoading(true);\r\n      // In a real app, this would be an API call\r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // Mock successful login\r\n      if (email && password) {\r\n        const user = {\r\n          id: 'user123',\r\n          name: 'Jane Doe',\r\n          email,\r\n          profilePic: 'https://i.pravatar.cc/150?img=1',\r\n          emergencyContacts: [\r\n            { id: 1, name: 'Mom', phone: '123-456-7890' },\r\n            { id: 2, name: 'Dad', phone: '098-765-4321' }\r\n          ]\r\n        };\r\n        \r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        setCurrentUser(user);\r\n        setIsAuthenticated(true);\r\n        setError(null);\r\n        return user;\r\n      } else {\r\n        throw new Error('Invalid credentials');\r\n      }\r\n    } catch (err) {\r\n      setError(err.message);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Register function\r\n  const register = async (userData) => {\r\n    try {\r\n      setLoading(true);\r\n      // In a real app, this would be an API call\r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n      \r\n      // Mock successful registration\r\n      if (userData.email && userData.password) {\r\n        const user = {\r\n          id: 'user' + Date.now(),\r\n          name: userData.name || 'New User',\r\n          email: userData.email,\r\n          profilePic: 'https://i.pravatar.cc/150?img=2',\r\n          emergencyContacts: []\r\n        };\r\n        \r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        setCurrentUser(user);\r\n        setIsAuthenticated(true);\r\n        setError(null);\r\n        return user;\r\n      } else {\r\n        throw new Error('Invalid user data');\r\n      }\r\n    } catch (err) {\r\n      setError(err.message);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    setCurrentUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{\r\n      currentUser,\r\n      isAuthenticated,\r\n      loading,\r\n      error,\r\n      login,\r\n      register,\r\n      logout\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}